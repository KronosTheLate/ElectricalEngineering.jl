"""
# Function call

`∥(z...)`

Type `\parallel` and hit the `tab` key to autocomplete the parallel symbol ∥

# Description

This calculates the parallell connection of impedances. Optionally, the
calculation can be performed using units from the module Unitiful.

# Variables

`z` Vector of impedances

# Examples

```julia
julia> using Unitful,Unitful.DefaultSymbols,EE
julia> ∥(4,6)
2.4
julia> ∥(4Ω,6Ω)
2.4 Ω
julia> 4Ω∥6Ω
2.4 Ω
julia> 2.4Ω∥(4Ω∥6Ω)
1.2 Ω
```

Type `\Omega` and hit the `tab` key to autocomplete the parallel symbol Ω
"""
function ∥(z...)
    ypar = 0/unit(z[1])
    for k=1:length(z)
        ypar = ypar + 1/z[k]
    end
    return 1/ypar
end

"""
# Function call

`polar(r,phi)`

# Description

Creates a complex quantity with length r and angle phi

# Variables

`r` Length of complex quantity; r may be utilized including a unit generated by
Unitful

`phi` Angle of complex quantity; if module Unitful is utilized, the angle may be
specified in degrees, by using unit `°`

# Examples

```julia
julia> using Unitful,Unitful.DefaultSymbols,EE
julia> U1=polar(2V,pi)
julia> -2 + 0im V
julia> U2=polar(sqrt(2)*1V,45°)
julia> 1 + 1im V
```
"""
function polar(r,phi)
  return r*cos(phi)+1im*r*sin(phi)
end
